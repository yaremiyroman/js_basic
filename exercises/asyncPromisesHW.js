// Напишіть функцію, яка приймає масив чисел як аргумент і повертає Promise. Promise має бути виконаний через 3 секунди і повернути суму всіх чисел із масиву.

function sumF(nums = []) {
    return new Promise((resolve, reject) => setTimeout(() => {
        resolve(nums.reduce((sum, num) => sum += num, 0))
    }, 3000));
}

sumF([3, 4, 6]).then((message) => {
    console.log('message >', message);
}).catch((error) => {
    console.error(error);
});




// Створіть функцію concurrentPromises, яка приймає масив промісів і максимальну кількість промісів, що виконуються одночасно. Функція має виконати проміси паралельно, але не більше зазначеної максимальної кількості. Результатом функції має бути масив результатів промісів.




// Реалізуйте функцію sequenceAsync, яка приймає масив функцій-промісів asyncFunctions. Кожна функція-проміс приймає попередній результат як аргумент і повертає новий результат. Функція sequenceAsync має виконати проміси послідовно, передаючи результат попереднього промісу в наступний. Зверніть увагу, що вам потрібно надати реалізацію функції sequenceAsync, яка дозволяє виконувати довільну кількість функцій-промісів у правильному порядку.

