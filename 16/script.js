// // Куки (cookies) - це невеликі фрагменти даних, які веб-сайти відправляють на комп'ютер користувача та зберігаються в його веб-переглядачі. Куки призначені для зберігання інформації про сеанс користувача, таку як стан входу, налаштування та інші дані.

// // Основні принципи роботи куків такі:

// // Встановлення куків: Веб-сайт встановлює куки на комп'ютер користувача, включаючи інформацію, таку як ім'я користувача, налаштування мови, ідентифікатор сесії тощо. Це робиться за допомогою HTTP-заголовка Set-Cookie.

// // Зберігання на комп'ютері користувача: Коли кука встановлена, вона зберігається в файлі на комп'ютері користувача. Вона може бути збережена протягом певного періоду часу або до закриття браузера, залежно від того, як вона була налаштована.

// // Відправлення на сервер: Коли користувач виконує запит до сервера, всі куки, які відносяться до цього домену, включаючи URL-адресу, яку він відвідав, автоматично додаються до запиту і відправляються на сервер. Це відбувається за допомогою HTTP-заголовка Cookie.

// // Використання на сервері: На сервері куки можуть бути зчитані та використані для ідентифікації користувача, а також для збереження інформації про його сесію або налаштування.

// // Оновлення та видалення куків: Веб-сайт може оновлювати або видаляти куки, надсилаючи відповідний HTTP-заголовок Set-Cookie з новими значеннями або інструкцією видалення.

// // Куки є важливою частиною веб-розвитку, оскільки вони дозволяють веб-сайтам зберігати інформацію про користувачів та їх сесії, що робить інтернет-сервіси більш функціональними та зручними для використання. Однак, важливо враховувати приватність та безпеку при роботі з куками, оскільки вони можуть містити конфіденційну інформацію.

// // name=value; expires=date; path=path; domain=domain; secure

// // Куки (cookies) веб-сайтів - це невеликі фрагменти текстової інформації, які веб-сервер передає браузеру, а браузер зберігає на комп'ютері користувача. Формат куки виглядає наступним чином:

// // Ось пояснення кожного параметра:
// // name=value: Це пара ім'я-значення куки. Наприклад, username=John.
// // expires=date: Це дата істечення куки. Після цієї дати кука стає недійсною і автоматично видаляється браузером. Якщо цей параметр не вказано, кука буде дійсною до закриття браузера. Формат дати зазвичай у форматі Day, DD Mon YYYY HH:MM:SS GMT. Наприклад, expires=Wed, 31 Dec 2025 23:59:59 GMT.
// // path=path: Це шлях на сервері, для якого кука є дійсною. Кука буде відправлятися тільки для цього шляху і його підшляхів. Наприклад, path=/.
// // domain=domain: Це домен, для якого кука є дійсною. Кука буде відправлятися лише для цього домена та його піддоменів. Наприклад, domain=.example.com.

// // Встановлюємо куку з назвою "user" та значенням "John" на три дні
// document.cookie =
//     `user=John; expires=${new Date(new Date().getTime() + 3 * 24 * 60 * 60 * 1000).toUTCString()}; path=/`;

// // Встановлюємо куку з назвою "user" та значенням "John" без часу закінчення
// document.cookie = "user=John; path=/";

// function getCookie(name) {
//     const cookies = document.cookie.split(';');

//     for (let i = 0; i < cookies.length; i++) {
//         let cookie = cookies[i].trim();

//         if (cookie.indexOf(name + "=") === 0)
//             return cookie.substring(name.length + 1);
//     }

//     return "";
// }

// function setCookie(name, value, days) {
//     const date = new Date();
//     date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
//     const expires = `expires=${date.toUTCString()}`;

//     document.cookie = `${name}=${value}; ${expires}; path=/`;
// }

// function hasCookie(name) {
//     const cookies = document.cookie.split(';');

//     for (let i = 0; i < cookies.length; i++) {
//         let cookie = cookies[i].trim();

//         if (cookie.indexOf(name + "=") === 0) return true;
//     }

//     return false;
// }

// function removeCookie(name) {
//     document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
// }

// // ~/Library/Application Support/Google/Chrome/Default/
// // Cookies






// // navigator.userAgent: Рядок, що містить інформацію про користувача, таку як назва браузера, версія, операційна система і т. д.

// // navigator.platform: Рядок, що містить інформацію про платформу, на якій працює браузер (наприклад, "Win32", "MacIntel" тощо).

// // navigator.language: Рядок, що містить інформацію про мову браузера користувача.

// // navigator.cookieEnabled: Логічне значення, яке вказує, чи включені файли cookie в браузері.

// // navigator.onLine: Логічне значення, яке показує, чи пристрій підключений до Інтернету.

// // navigator.plugins: Масив об'єктів, що представляють встановлені плагіни в браузері.


// // navigator.geolocation: Об'єкт, що надає можливість отримувати геолокацію пристрою користувача.
// // navigator.geolocation - це веб-API в JavaScript, яке дозволяє веб-додаткам отримувати географічне розташування користувача. Воно надає інформацію, таку як широта та довгота, висота, точність та напрямок.

// // Проте важливо зазначити, що доступ до цього API потребує дозволу користувача, і сучасні браузери зазвичай запитують користувача про надання або відмову в доступі до їх місцезнаходження, коли веб-сторінка цього потребує. Це робиться для захисту приватності та безпеки користувача.

// // Ось базовий приклад того, як ви можете використовувати navigator.geolocation в JavaScript:

// if ("geolocation" in navigator) {
//     // Геолокація доступна
//     navigator.geolocation.getCurrentPosition(
//         function (position) {
//             console.log("Широта:", position.coords.latitude);
//             console.log("Довгота:", position.coords.longitude);
//             console.log("Точність:", position.coords.accuracy);
//         },
//         function (error) {
//             // Обробка будь-яких помилок, що виникають під час отримання місцезнаходження
//             console.error("Помилка отримання місцезнаходження:", error);
//         }
//     );
// } else {
//     // Геолокація не підтримується
//     console.error("Геолокація не підтримується цим браузером.");
// }






let myPin = null;

function getUserPosition() {
  return new Promise((resolve, reject) => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        position => resolve(position.coords),
        error => reject(error)
      );
    } else {
      reject(new Error("Геолокація не підтримується цим браузером."));
    }
  });
}

// Використання проміса для отримання позиції
getUserPosition()
  .then(userPosition => {
    console.log("Позиція отримана:", userPosition);
      myPin = userPosition;
    // Тут ви можете робити що завгодно зі збереженими координатами
    document.body.textContent = myPin.latitude + '  ' + myPin.longitude;
  })
  .catch(error => {
    console.error("Помилка отримання місцезнаходження:", error);
  });


if (!!myPin) console.log('myPin > ', myPin);















// // screen.width: Ширина екрану в пікселях.
// // screen.height: Висота екрану в пікселях.
// // screen.availWidth: Доступна ширина екрану без панелі інструментів та інших системних елементів.
// // screen.availHeight: Доступна висота екрану без панелі інструментів та інших системних елементів.
// // screen.orientation: Орієнтація екрану (портретна або альбомна).





// // Об'єкт window.location містить інформацію про поточну URL-адресу (адресу сторінки) та надає можливість перенаправляти браузер на інші URL-адреси. Ось кілька основних властивостей та методів window.location


// // window.location.href: Повна URL-адреса поточної сторінки.
// // window.location.protocol: Протокол поточної сторінки (наприклад, "http:", "https:", "file:" і т. д.).
// // window.location.host: Хост (ім'я хоста та порт) поточної сторінки.
// // window.location.hostname: Ім'я хоста поточної сторінки.
// // window.location.port: Порт поточної сторінки.
// // window.location.pathname: Шлях до файлу на сервері.
// // window.location.search: Рядок запиту (query string) поточної URL-адреси.
// // window.location.hash: Частка URI-фрагмента (наприклад, "#section") поточної URL-адреси.

// // window.location.assign(url): Завантажує вказаний URL-адресу в поточне вікно.
// // window.location.reload(force): Перезавантажує поточну сторінку. Якщо force встановлено в true, перезавантаження буде примусовим, і сторінка буде перезавантажена з сервера, а не з кешу браузера.






// // Об'єкт window.history надає доступ до історії браузера та дозволяє програмно маніпулювати історією перегляду безпосередньо з JavaScript. Ось кілька основних властивостей та методів window.history:


// // window.history.length: Кількість записів у стеку історії браузера.

// // window.history.back(): Переміщення до попередньої сторінки в історії браузера. Це еквівалент натисканню кнопки "Назад" у браузері.

// // window.history.forward(): Переміщення до наступної сторінки в історії браузера. Це еквівалент натисканню кнопки "Вперед" у браузері.

// // window.history.go(delta): Переміщення на delta записів у стеку історії браузера. delta може бути від'ємним числом для переміщення назад у історії або додатнім для переміщення вперед.

// // window.history.pushState(state, title, url): Додає новий запис до історії браузера з вказаним станом state, заголовком title та URL-адресою url. Цей метод не призводить до перезавантаження сторінки.



// // console.log(window.history.length);

// // Переміщення до попередньої сторінки в історії
// window.history.back();

// // Переміщення до наступної сторінки в історії
// window.history.forward();

// // Переміщення на дві сторінки вперед у історії
// window.history.go(2);





// // Метод pushState() використовується для додавання нового запису до історії браузера без перезавантаження сторінки. Параметр state у методі pushState() дозволяє вам зберегти додатковий стан асоційований з записом історії.

// // Зазвичай, параметр state є об'єктом JavaScript, який містить будь-які дані, які ви хочете пов'язати з новим записом історії. Це може бути, наприклад, об'єкт з даними про стан сторінки або параметрами, які ви хочете передати при переході на новий запис історії.

// // Наприклад, ви можете використати pushState() для переходу на нову сторінку та передачі певних параметрів у шляху:

// const stateData = { page: 'about', userId: 123 };
// const pageTitle = 'About Page';
// const newUrl = '/about';

// window.history.pushState(stateData, pageTitle, newUrl);



// // Після того, як ви використали метод pushState() для додавання нового запису до історії браузера, ви можете отримати дані stateData з об'єкта події popstate, який спрацьовує при переході між записами історії.

// // Ось як ви можете отримати stateData за допомогою обробника подій popstate:

// // Коли користувач переходить між записами історії (наприклад, натискаючи кнопки "Назад" або "Вперед" у браузері), обробник подій popstate спрацьовує, і ви можете отримати дані stateData з властивості state об'єкта події event. Якщо stateData було передано при додаванні запису історії за допомогою pushState(), ви можете отримати ці дані для подальшого використання.



// window.addEventListener('popstate', function (event) {
//     const stateData = event.state;

//     if (stateData) {
//         console.log('State data:', stateData);
//         // Тут ви можете використовувати stateData для виконання необхідних дій
//     } else {
//         console.log('No state data available');
//     }
// });


// window.history.back();






